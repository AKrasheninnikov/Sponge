//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4963
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace Sponge.Common.Context
{

    public partial class SpongeContextDataContext : Microsoft.SharePoint.Linq.DataContext
    {

        #region Extensibility Method Definitions
        partial void OnCreated();
        #endregion

        public SpongeContextDataContext(string requestUrl) :
            base(requestUrl)
        {
            this.OnCreated();
        }

        [Microsoft.SharePoint.Linq.ListAttribute(Name = "ConfigApplications")]
        public Microsoft.SharePoint.Linq.EntityList<Item> ConfigApplications
        {
            get
            {
                return this.GetList<Item>("ConfigApplications");
            }
        }

        [Microsoft.SharePoint.Linq.ListAttribute(Name = "ConfigItems")]
        public Microsoft.SharePoint.Linq.EntityList<ConfigItemsItem> ConfigItems
        {
            get
            {
                return this.GetList<ConfigItemsItem>("ConfigItems");
            }
        }

        [Microsoft.SharePoint.Linq.ListAttribute(Name = "LogAppenders")]
        public Microsoft.SharePoint.Linq.EntityList<Item> LogAppenders
        {
            get
            {
                return this.GetList<Item>("LogAppenders");
            }
        }

        [Microsoft.SharePoint.Linq.ListAttribute(Name = "LogConfigs")]
        public Microsoft.SharePoint.Linq.EntityList<Item> LogConfigs
        {
            get
            {
                return this.GetList<Item>("LogConfigs");
            }
        }
    }

    /// <summary>
    /// Create a new list item.
    /// </summary>
    [Microsoft.SharePoint.Linq.ContentTypeAttribute(Name = "Item", Id = "0x01")]
    [Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type = typeof(ConfigItemsItem))]
    public partial class Item : Microsoft.SharePoint.Linq.ITrackEntityState, Microsoft.SharePoint.Linq.ITrackOriginalValues, System.ComponentModel.INotifyPropertyChanged, System.ComponentModel.INotifyPropertyChanging
    {

        private System.Nullable<int> _id;

        private System.Nullable<int> _version;

        private string _path;

        private Microsoft.SharePoint.Linq.EntityState _entityState;

        private System.Collections.Generic.IDictionary<string, object> _originalValues;

        private string _title;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate();
        partial void OnCreated();
        #endregion

        Microsoft.SharePoint.Linq.EntityState Microsoft.SharePoint.Linq.ITrackEntityState.EntityState
        {
            get
            {
                return this._entityState;
            }
            set
            {
                if ((value != this._entityState))
                {
                    this._entityState = value;
                }
            }
        }

        System.Collections.Generic.IDictionary<string, object> Microsoft.SharePoint.Linq.ITrackOriginalValues.OriginalValues
        {
            get
            {
                if ((null == this._originalValues))
                {
                    this._originalValues = new System.Collections.Generic.Dictionary<string, object>();
                }
                return this._originalValues;
            }
        }

        public Item()
        {
            this.OnCreated();
        }

        [Microsoft.SharePoint.Linq.ColumnAttribute(Name = "ID", Storage = "_id", ReadOnly = true, FieldType = "Counter")]
        public System.Nullable<int> Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((value != this._id))
                {
                    this.OnPropertyChanging("Id", this._id);
                    this._id = value;
                    this.OnPropertyChanged("Id");
                }
            }
        }

        [Microsoft.SharePoint.Linq.ColumnAttribute(Name = "owshiddenversion", Storage = "_version", ReadOnly = true, FieldType = "Integer")]
        public System.Nullable<int> Version
        {
            get
            {
                return this._version;
            }
            set
            {
                if ((value != this._version))
                {
                    this.OnPropertyChanging("Version", this._version);
                    this._version = value;
                    this.OnPropertyChanged("Version");
                }
            }
        }

        [Microsoft.SharePoint.Linq.ColumnAttribute(Name = "FileDirRef", Storage = "_path", ReadOnly = true, FieldType = "Lookup", IsLookupValue = true)]
        public string Path
        {
            get
            {
                return this._path;
            }
            set
            {
                if ((value != this._path))
                {
                    this.OnPropertyChanging("Path", this._path);
                    this._path = value;
                    this.OnPropertyChanged("Path");
                }
            }
        }

        [Microsoft.SharePoint.Linq.ColumnAttribute(Name = "Title", Storage = "_title", Required = true, FieldType = "Text")]
        public virtual string Title
        {
            get
            {
                return this._title;
            }
            set
            {
                if ((value != this._title))
                {
                    this.OnPropertyChanging("Title", this._title);
                    this._title = value;
                    this.OnPropertyChanged("Title");
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public event System.ComponentModel.PropertyChangingEventHandler PropertyChanging;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            if ((null != this.PropertyChanged))
            {
                this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        protected virtual void OnPropertyChanging(string propertyName, object value)
        {
            if ((null == this._originalValues))
            {
                this._originalValues = new System.Collections.Generic.Dictionary<string, object>();
            }
            if ((false == this._originalValues.ContainsKey(propertyName)))
            {
                this._originalValues.Add(propertyName, value);
            }
            if ((null != this.PropertyChanging))
            {
                this.PropertyChanging(this, new System.ComponentModel.PropertyChangingEventArgs(propertyName));
            }
        }
    }

    /// <summary>
    /// Create a new list item.
    /// </summary>
    [Microsoft.SharePoint.Linq.ContentTypeAttribute(Name = "Item", Id = "0x01", List = "ConfigItems")]
    public partial class ConfigItemsItem : Item
    {

        private string _value;

        private Microsoft.SharePoint.Linq.EntityRef<Item> _application;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate();
        partial void OnCreated();
        #endregion

        public ConfigItemsItem()
        {
            this._application = new Microsoft.SharePoint.Linq.EntityRef<Item>();
            this._application.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Item>>(this.OnApplicationSync);
            this._application.OnChanged += new System.EventHandler(this.OnApplicationChanged);
            this._application.OnChanging += new System.EventHandler(this.OnApplicationChanging);
            this.OnCreated();
        }

        [Microsoft.SharePoint.Linq.ColumnAttribute(Name = "Value", Storage = "_value", Required = true, FieldType = "Note")]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((value != this._value))
                {
                    this.OnPropertyChanging("Value", this._value);
                    this._value = value;
                    this.OnPropertyChanged("Value");
                }
            }
        }

        [Microsoft.SharePoint.Linq.AssociationAttribute(Name = "Application", Storage = "_application", MultivalueType = Microsoft.SharePoint.Linq.AssociationType.Single, List = "ConfigApplications")]
        public Item Application
        {
            get
            {
                return this._application.GetEntity();
            }
            set
            {
                this._application.SetEntity(value);
            }
        }

        private void OnApplicationChanging(object sender, System.EventArgs e)
        {
            this.OnPropertyChanging("Application", this._application.Clone());
        }

        private void OnApplicationChanged(object sender, System.EventArgs e)
        {
            this.OnPropertyChanged("Application");
        }

        private void OnApplicationSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Item> e)
        {
        }
    }
}